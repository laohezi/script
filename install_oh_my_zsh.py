#!/usr/bin/env python3
import subprocess
import os
import sys
import platform
from pathlib import Path

def run_cmd(cmd, check=True):
    print(f"执行命令: {cmd}")
    try:
        subprocess.run(cmd, shell=True, check=check, executable='/bin/zsh')
        print(f"✅ 命令执行成功")
        return True
    except subprocess.CalledProcessError as e:
        print(f"❌ 命令执行失败: {cmd}")
        print(f"错误详情: {str(e)}")
        return False

def install_zsh():
    print("\n========== 开始安装 ZSH ==========")
    system = platform.system()
    if system == "Darwin":
        if not Path("/bin/zsh").exists() and not Path("/opt/homebrew/bin/zsh").exists():
            print("🔍 未检测到 ZSH，通过 Homebrew 安装中...")
            result = run_cmd("brew install zsh")
            if result:
                print("✅ ZSH 安装成功")
            else:
                print("❌ ZSH 安装失败")
        else:
            print("✅ 已检测到 ZSH，跳过安装")
    elif system == "Linux":
        if not Path("/bin/zsh").exists():
            print("🔍 未检测到 ZSH，通过 APT 安装中...")
            result = run_cmd("sudo apt update && sudo apt install -y zsh")
            if result:
                print("✅ ZSH 安装成功")
            else:
                print("❌ ZSH 安装失败")
        else:
            print("✅ 已检测到 ZSH，跳过安装")
    else:
        print("❌ 不支持的操作系统")
        sys.exit(1)

    # Set zsh as default shell
    current_shell = os.environ.get('SHELL', '')
    if 'zsh' not in current_shell:
        print("🔄 设置 ZSH 为默认 shell...")
        result = run_cmd(f"chsh -s $(which zsh)", check=False)
        if result:
            print("✅ 已将 ZSH 设置为默认 shell")
        else:
            print("⚠️ 设置默认 shell 可能需要重新登录后生效")
    else:
        print("✅ ZSH 已是默认 shell")
    
    print("========== ZSH 安装完成 ==========")

def install_ohmyzsh():
    print("\n========== 开始安装 Oh My ZSH ==========")
    ohmyzsh_dir = Path.home() / ".oh-my-zsh"
    if not ohmyzsh_dir.exists():
        print("🔄 正在安装 Oh My ZSH...")
        result = run_cmd('sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended')
        if result:
            print("✅ Oh My ZSH 安装成功")
        else:
            print("❌ Oh My ZSH 安装失败")
    else:
        print("✅ 已检测到 Oh My ZSH，跳过安装")
    
    print("========== Oh My ZSH 安装完成 ==========")

def install_plugins():
    print("\n========== 开始安装插件 ==========")
    plugins_dir = Path.home() / ".oh-my-zsh/custom/plugins"
    plugins = {
        "zsh-syntax-highlighting": "https://github.com/zsh-users/zsh-syntax-highlighting.git",
        "zsh-history-substring-search": "https://github.com/zsh-users/zsh-history-substring-search.git",
        "zsh-completions": "https://github.com/zsh-users/zsh-completions.git",
        "zsh-autosuggestions": "https://github.com/zsh-users/zsh-autosuggestions.git"
    }

    total_plugins = len(plugins)
    installed_plugins = 0
    
    print(f"🔄 共计 {total_plugins} 个插件待安装")
    
    for plugin, url in plugins.items():
        plugin_path = plugins_dir / plugin
        if not plugin_path.exists():
            print(f"\n📦 安装插件 ({installed_plugins+1}/{total_plugins}): {plugin}")
            result = run_cmd(f"git clone {url} {plugin_path}")
            if result:
                print(f"✅ 插件 {plugin} 安装成功")
                installed_plugins += 1
            else:
                print(f"❌ 插件 {plugin} 安装失败")
        else:
            print(f"✅ 插件 {plugin} 已存在，跳过安装")
            installed_plugins += 1
    
    print(f"\n✅ 成功安装 {installed_plugins}/{total_plugins} 个插件")
    print("========== 插件安装完成 ==========")

def update_zshrc():
    print("\n========== 开始更新配置文件 ==========")
    zshrc = Path.home() / ".zshrc"
    backup = zshrc.with_suffix('.zshrc.bak')
    
    # Create backup
    if zshrc.exists() and not backup.exists():
        print(f"🔄 创建配置文件备份: {backup}")
        zshrc.rename(backup)
        print("✅ 备份创建成功")
    elif backup.exists():
        print(f"ℹ️ 备份文件已存在: {backup}")

    # Generate new config
    print("🔄 生成新的配置文件...")
    config = f"""# Generated by install script
export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="robbyrussell"

plugins=(
    git
    zsh-syntax-highlighting
    zsh-history-substring-search
    zsh-completions
    zsh-autosuggestions
)

source $ZSH/oh-my-zsh.sh

# Plugin configurations
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#888888"
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
"""

    # Preserve custom configurations from backup
    if backup.exists():
        print("🔄 合并用户自定义配置...")
        try:
            with open(backup, 'r') as f:
                content = f.read()
                custom = content.split('# Generated by install script', 1)[0]
                if custom.strip():
                    print("✅ 已保留用户自定义配置")
                    config = custom + config
        except Exception as e:
            print(f"⚠️ 读取备份文件时出错: {str(e)}")

    try:
        with open(zshrc, 'w') as f:
            f.write(config)
        print(f"✅ 配置文件已更新: {zshrc}")
    except Exception as e:
        print(f"❌ 写入配置文件失败: {str(e)}")
    
    print("========== 配置文件更新完成 ==========")

if __name__ == "__main__":
    print("\n🚀 开始安装 Oh My ZSH 及插件...")
    print("======================================")
    
    install_zsh()
    install_ohmyzsh()
    install_plugins()
    update_zshrc()
    
    print("\n======================================")
    print("✨ 安装完成!")
    print("📝 摘要:")
    print("  - ZSH 已安装")
    print("  - Oh My ZSH 框架已安装")
    print("  - 已安装插件: git, zsh-syntax-highlighting, zsh-history-substring-search, zsh-completions, zsh-autosuggestions")
    print("  - 配置文件已更新")
    print("\n⚠️ 请重启终端或执行 'source ~/.zshrc' 以应用更改")
    print("👉 如有问题，请检查备份文件: ~/.zshrc.bak")
    print("======================================\n")
